c <- CallConsensus(w$weighted[r[1]:r[2], , drop=FALSE]);
c <- c[c!='-'];
n <- apply(cbind(c, a[names(c), ]), 1, function(x) length(x[x==x[1]]))-1;
sum(n);
});
if (max(sm1) < sm0) pss <- TRUE else {
removed <- c(removed, names(seq)[sm1==max(sm1)][1]);
seq <- seq[!(names(seq) %in% removed)];
# Run consensus algorithm
msa <- runMsa(seq, method);
# Base by base
aln <- do.call('cbind', strsplit(as.character(msa), ''));
rownames(aln) <- 1:nrow(aln);
}
};
seg
seq
msa <- runMsa(seq, method);
# Base by base
aln <- do.call('cbind', strsplit(as.character(msa), ''));
rownames(aln) <- 1:nrow(aln);
pss <- FALSE;
while(!pss & length(seq)>2) { print(length(seq));
rg1 <- apply(aln, 2, function(a) range(which(a!='-')));
rg0 <- c(max(rg1[1, ]), min(rg1[2, ]));
cll <- CallConsensus(w$weighted[rg0[1]:rg0[2], , drop=FALSE]);
cll <- cll[cll!='-'];
sm0 <- sum(apply(cbind(cll, aln[names(cll), ]), 1, function(x) length(x[x==x[1]]))-1);
sm1 <- sapply(1:ncol(aln), function(i) {
a <- aln[, -i];
w <- WeightConsensus(a, method='count');
r <- apply(a, 2, function(a) range(which(a!='-')));
r <- c(max(r[1, ]), min(r[2, ]));
c <- CallConsensus(w$weighted[r[1]:r[2], , drop=FALSE]);
c <- c[c!='-'];
n <- apply(cbind(c, a[names(c), ]), 1, function(x) length(x[x==x[1]]))-1;
sum(n);
});
if (max(sm1) < sm0) pss <- TRUE else {
removed <- c(removed, names(seq)[sm1==max(sm1)][1]);
seq <- seq[!(names(seq) %in% removed)];
# Run consensus algorithm
msa <- runMsa(seq, method);
# Base by base
aln <- do.call('cbind', strsplit(as.character(msa), ''));
rownames(aln) <- 1:nrow(aln);
}
};
seq
seq <- seg[32:36]
# Run consensus algorithm
msa <- runMsa(seq, method);
# Base by base
aln <- do.call('cbind', strsplit(as.character(msa), ''));
rownames(aln) <- 1:nrow(aln);
wgt <- WeightConsensus(aln, method='r');
pss
rg1 <- apply(aln, 2, function(a) range(which(a!='-')));
rg0 <- c(max(rg1[1, ]), min(rg1[2, ]));
cll <- CallConsensus(wgt$weighted[rg0[1]:rg0[2], , drop=FALSE]);
cll <- cll[cll!='-'];
cll
length(cll)
sm0 <- sum(apply(cbind(cll, aln[names(cll), ]), 1, function(x) length(x[x==x[1]]))-1);
sm0
sm1 <- sapply(1:ncol(aln), function(i) {
a <- aln[, -i];
w <- WeightConsensus(a, method='count');
r <- apply(a, 2, function(a) range(which(a!='-')));
r <- c(max(r[1, ]), min(r[2, ]));
c <- CallConsensus(w$weighted[r[1]:r[2], , drop=FALSE]);
c <- c[c!='-'];
n <- apply(cbind(c, a[names(c), ]), 1, function(x) length(x[x==x[1]]))-1;
sum(n);
});
sm1
if (max(sm1) < sm0) pss <- TRUE else {
removed <- c(removed, names(seq)[sm1==max(sm1)][1]);
seq <- seq[!(names(seq) %in% removed)];
# Run consensus algorithm
msa <- runMsa(seq, method);
# Base by base
aln <- do.call('cbind', strsplit(as.character(msa), ''));
rownames(aln) <- 1:nrow(aln);
wgt <- WeightConsensus(aln, method='r');
}
length(seq)
seq <- seg[32:36]
removed
removed <- c()
seq <- seg[32:36]
# Run consensus algorithm
msa <- runMsa(seq, method);
# Base by base
aln <- do.call('cbind', strsplit(as.character(msa), ''));
rownames(aln) <- 1:nrow(aln);
wgt <- WeightConsensus(aln, method='r');
rg1 <- apply(aln, 2, function(a) range(which(a!='-')));
rg0 <- c(max(rg1[1, ]), min(rg1[2, ]));
cll <- CallConsensus(wgt$weighted[rg0[1]:rg0[2], , drop=FALSE]);
cll <- cll[cll!='-'];
sm0 <- sum(apply(cbind(cll, aln[names(cll), ]), 1, function(x) length(x[x==x[1]]))-1);
sm1 <- sapply(1:ncol(aln), function(i) {
a <- aln[, -i];
w <- WeightConsensus(a, method='count');
r <- apply(a, 2, function(a) range(which(a!='-')));
r <- c(max(r[1, ]), min(r[2, ]));
c <- CallConsensus(w$weighted[r[1]:r[2], , drop=FALSE]);
c <- c[c!='-'];
n <- apply(cbind(c, a[names(c), ]), 1, function(x) length(x[x==x[1]]))-1;
sum(n);
});
sm0
sm1
max(sm1) < sm0
removed <- c(removed, names(seq)[sm1==max(sm1)][1]);
seq <- seq[!(names(seq) %in% removed)];
length(seq)
# Run consensus algorithm
msa <- runMsa(seq, method);
# Base by base
aln <- do.call('cbind', strsplit(as.character(msa), ''));
rownames(aln) <- 1:nrow(aln);
wgt <- WeightConsensus(aln, method='r');
rg1 <- apply(aln, 2, function(a) range(which(a!='-')));
rg0 <- c(max(rg1[1, ]), min(rg1[2, ]));
cll <- CallConsensus(wgt$weighted[rg0[1]:rg0[2], , drop=FALSE]);
cll <- cll[cll!='-'];
sm0 <- sum(apply(cbind(cll, aln[names(cll), ]), 1, function(x) length(x[x==x[1]]))-1);
sm1 <- sapply(1:ncol(aln), function(i) {
a <- aln[, -i];
w <- WeightConsensus(a, method='count');
r <- apply(a, 2, function(a) range(which(a!='-')));
r <- c(max(r[1, ]), min(r[2, ]));
c <- CallConsensus(w$weighted[r[1]:r[2], , drop=FALSE]);
c <- c[c!='-'];
n <- apply(cbind(c, a[names(c), ]), 1, function(x) length(x[x==x[1]]))-1;
sum(n);
});
sm0
sm1
removed <- c()
seq <- seg[32:36]
# Run consensus algorithm
msa <- runMsa(seq, method);
# Base by base
aln <- do.call('cbind', strsplit(as.character(msa), ''));
rownames(aln) <- 1:nrow(aln);
wgt <- WeightConsensus(aln, method='r');
length(seq)
pss <- FALSE;
while(!pss & length(seq)>2) { print(length(seq));
rg1 <- apply(aln, 2, function(a) range(which(a!='-')));
rg0 <- c(max(rg1[1, ]), min(rg1[2, ]));
cll <- CallConsensus(wgt$weighted[rg0[1]:rg0[2], , drop=FALSE]);
cll <- cll[cll!='-'];
sm0 <- sum(apply(cbind(cll, aln[names(cll), ]), 1, function(x) length(x[x==x[1]]))-1);
sm1 <- sapply(1:ncol(aln), function(i) {
a <- aln[, -i];
w <- WeightConsensus(a, method='count');
r <- apply(a, 2, function(a) range(which(a!='-')));
r <- c(max(r[1, ]), min(r[2, ]));
c <- CallConsensus(w$weighted[r[1]:r[2], , drop=FALSE]);
c <- c[c!='-'];
n <- apply(cbind(c, a[names(c), ]), 1, function(x) length(x[x==x[1]]))-1;
sum(n);
});
if (max(sm1) < sm0) pss <- TRUE else {
removed <- c(removed, names(seq)[sm1==max(sm1)][1]);
seq <- seq[!(names(seq) %in% removed)];
# Run consensus algorithm
msa <- runMsa(seq, method);
# Base by base
aln <- do.call('cbind', strsplit(as.character(msa), ''));
rownames(aln) <- 1:nrow(aln);
wgt <- WeightConsensus(aln, method='r');
}
};
length(seq)
msa
dim(aln)
head(aln)
dim(wgt[[1]])
dim(aln)
dir()
loc
dim(loc)
cap <- readRDS("/Users/zhangz/Google Drive/Projects/cap.rds")
length(cap)
length(cap)
head(cap)
cap
seq <- readRDS("/Users/zhangz/Documents/RH/data/seq.rds")
nchar(seq)
stt <- loc[, 1]
end <- loc[, 2]
similarity=0.6
SelectPalindromeSegment <- function(seq, stt, end, similarity=0.6) {
require(Biostrings);
require(msa);
# Order segments by location
ord <- order(stt);
stt <- stt[ord];
end <- end[ord];
# Retrieve segment sequences from full sequences
seg <- sapply(1:length(stt), function(i) subseq(seq, stt[i], end[i]));
seg <- DNAStringSet(seg);
names(seg) <- stt;
# Best alignment of segment pairs
cmb <- t(combn(length(seg), 2));
opt <- t(apply(cmb, 1, function(i) OptimizeAlignment(seg[[i[1]]], seg[[i[2]]])));
prs <- t(sapply(opt, function(x) x[[1]]));
tbl <- cbind(Seg1=cmb[, 1], Seg2=cmb[, 2], prs);
scs <- tbl[, 'Match'] - tbl[, 'Mismatch'] - tbl[, 'Insertion'] - tbl[, 'Deletion'];
scs <- tbl[, 'Strand']*scs/max(scs);
crr <- matrix(NA, nc=length(seg), nr=length(seg), dimnames=list(1:length(seg), 1:length(seg)));
for (i in 1:nrow(tbl)) crr[tbl[i,1], tbl[i,2]] <- crr[tbl[i,2], tbl[i,1]] <- scs[i];
mxr <- apply(crr, 1, function(r) max(abs(r), na.rm=TRUE));
cff <- min(max(mxr), similarity);
crr <- crr[mxr>=cff, mxr>=cff];
mid <- apply(crr, 1, function(r) median(abs(r), na.rm=TRUE));
while (length(mid[mid<=0.5]) & nrow(crr)>2) {
crr <- crr[mid>min(mid), mid>min(mid)];
mid <- apply(crr, 1, function(r) median(abs(r), na.rm=TRUE));
};
sgn <- crr;
sgn[sgn<0] <- -1;
sgn[sgn>0] <- 1;
hcl <- hclust(as.dist(1-sgn));
ctr <- cutree(hcl, h=0);
cls <- lapply(1:max(ctr), function(i) rownames(crr)[ctr==i]);
cls <- cls[order(sapply(cls, length))];
sel <- seg[as.numeric(rownames(crr))];
names(sel) <- rownames(crr);
if (length(cls)>1) sel[cls[[2]]] <- reverseComplement(sel[cls[[2]]]);
loc <- cbind(start=stt, end=end);
rownames(loc) <- 1:nrow(loc);
list(segment=sel, location=loc, pair=tbl, full=seq);
};
sel <- SelectPalindromeSegment(seq, stt, end, 0.6)
SelectPalindromeSegment <- function(seq, stt, end, similarity=0.6) {
require(Biostrings);
require(msa);
# Order segments by location
ord <- order(stt);
stt <- stt[ord];
end <- end[ord];
# Retrieve segment sequences from full sequences
seg <- sapply(1:length(stt), function(i) subseq(seq, stt[i], end[i]));
seg <- DNAStringSet(seg);
names(seg) <- stt;
# Best alignment of segment pairs
cmb <- t(combn(length(seg), 2));
opt <- t(apply(cmb, 1, function(i) OptimizePairwiseAlignment(seg[[i[1]]], seg[[i[2]]])));
prs <- t(sapply(opt, function(x) x[[1]]));
tbl <- cbind(Seg1=cmb[, 1], Seg2=cmb[, 2], prs);
scs <- tbl[, 'Match'] - tbl[, 'Mismatch'] - tbl[, 'Insertion'] - tbl[, 'Deletion'];
scs <- tbl[, 'Strand']*scs/max(scs);
crr <- matrix(NA, nc=length(seg), nr=length(seg), dimnames=list(1:length(seg), 1:length(seg)));
for (i in 1:nrow(tbl)) crr[tbl[i,1], tbl[i,2]] <- crr[tbl[i,2], tbl[i,1]] <- scs[i];
mxr <- apply(crr, 1, function(r) max(abs(r), na.rm=TRUE));
cff <- min(max(mxr), similarity);
crr <- crr[mxr>=cff, mxr>=cff];
mid <- apply(crr, 1, function(r) median(abs(r), na.rm=TRUE));
while (length(mid[mid<=0.5]) & nrow(crr)>2) {
crr <- crr[mid>min(mid), mid>min(mid)];
mid <- apply(crr, 1, function(r) median(abs(r), na.rm=TRUE));
};
sgn <- crr;
sgn[sgn<0] <- -1;
sgn[sgn>0] <- 1;
hcl <- hclust(as.dist(1-sgn));
ctr <- cutree(hcl, h=0);
cls <- lapply(1:max(ctr), function(i) rownames(crr)[ctr==i]);
cls <- cls[order(sapply(cls, length))];
sel <- seg[as.numeric(rownames(crr))];
names(sel) <- rownames(crr);
if (length(cls)>1) sel[cls[[2]]] <- reverseComplement(sel[cls[[2]]]);
loc <- cbind(start=stt, end=end);
rownames(loc) <- 1:nrow(loc);
list(segment=sel, location=loc, pair=tbl, full=seq);
};
# BestAlign <- function(s1, s2) {
#   pw1 <- pairwiseAlignment(s1, s2);
#   pw2 <- pairwiseAlignment(s1, reverseComplement(s2));
#   if (score(pw1) > score(pw2)) {
#     pw <- pw1;
#     di <- 1;
#   } else {
#     pw <- pw2;
#     di <- -1;
#   };
#
#   al1 <- strsplit(as.character(subject(pw)), '')[[1]];
#   al2 <- strsplit(as.character(pattern(pw)), '')[[1]];
#   rle <- Rle(as.integer(al1==al2));
#   val <- runValue(rle);
#   len <- runLength(rle);
#   stt <- start(rle);
#   end <- end(rle);
#   ind <- which(val>0 & len>3);
#
#   stt1 <- al1[1:stt[ind[1]]]
#   stt2 <- al2[1:stt[ind[1]]]
#   stt1 <- length(stt1[stt1!='-']);
#   stt2 <- length(stt2[stt2!='-']);
#
#   end1 <- al1[end[ind[length(ind)]]:length(al1)];
#   end2 <- al2[end[ind[length(ind)]]:length(al2)];
#   end1 <- length(end1[end1!='-']);
#   end2 <- length(end2[end2!='-']);
#   end1 <- nchar(s1)-end1+1;
#   end2 <- nchar(s2)-end2+1;
#
#   sb1 <- gsub('-', '', subject(pw));
#   sb2 <- gsub('-', '', pattern(pw));
#   pw0 <- pairwiseAlignment(substr(sb1, stt1, end1), substr(sb2, stt2, end2));
#   smm <- summary(pw0);
#
#   c(score(pw0), di, stt1, end1, stt2, end2, smm@nmatch, smm@nmismatch, smm@ninsertion[2], smm@ndeletion[2])
# }
sel <- SelectPalindromeSegment(seq, stt, end, 0.6)
names(sel)
sel$segment
seq <- sel$segment
ref <- NA
method <- 'muscle'
s <- readRDS("/Users/zhangz/Documents/RH/data/seq.rds")
setwd('/Users/zhangz/Documents/RH/data/')
saveRDS(sel, 'UPID380_Read_57999844_Aln200_Selected.rds')
seq <- sel$segment
weight <- 'r'
rm(list=ls())
seq <- readRDS('UPID380_Read_57999844_Aln200_Selected.rds')
seq
length(seq)
seq
names(seq)
seq <- seq[[1]]
seq
length(seq)
ref
ref <- NA
method<-'muscle'
weight <- 'r'
runMsa <- function(seq, method) {
if (tolower(method)[1]=='clustalw') {
msaClustalW(seq, order='input');
} else if (tolower(method)[1]=='clustalomega') {
msaClustalOmega(seq, order='input');
} else {
msaMuscle(seq, order='input');
};
};
# Run MSA and remove sequence(s) not agree with the others
removed <- c();
pss <- FALSE;
removed <- c();
pss <- FALSE;
while(!pss & length(seq)>2) { print(length(seq));
seq <- seq[!(names(seq) %in% removed)];
# Run consensus algorithm
msa <- runMsa(seq, method);
# Base by base
aln <- do.call('cbind', strsplit(as.character(msa), ''));
rownames(aln) <- 1:nrow(aln);
# Weigth sequences
wgt <- WeightConsensus(aln, method=weight);
# Call consensus
rg1 <- apply(aln, 2, function(a) range(which(a!='-')));
rg0 <- c(max(rg1[1, ]), min(rg1[2, ]));
cll <- CallConsensus(wgt$weighted[rg0[1]:rg0[2], , drop=FALSE]);
cll <- cll[cll!='-'];
if (min(wgt[[2]])<(0.5*(length(seq)-1))) {
removed <- c(removed, names(seq)[wgt[[2]]==min(wgt[[2]])]);
} else pss <- TRUE;
};
WeightConsensus <- function(mtrx, method=c('r', 'rank', 'count')) {
ltt <- c('-', 'A', 'C', 'G', 'T')
tbl <- sum <- matrix(0, nr=nrow(mtrx), nc=length(ltt), dimnames = list(rownames(mtrx), ltt));
ttl <- rep(0, nrow(mtrx));
rng <- apply(mtrx, 2, function(a) range(which(a!='-')));
rng <- c(max(rng[1, ]), min(rng[2, ]));
sub <- mtrx[rng[1]:rng[2], , drop=FALSE];
for (i in 1:ncol(mtrx)) for (j in 1:length(ltt)) sum[mtrx[, i]==ltt[j], j] <- sum[mtrx[, i]==ltt[j], j] + 1;
cnt <- apply(sub, 2, function(s) {
n <- rep(0, length(s));
for (i in 1:length(ltt)) n[s==ltt[i]] <- sum[rng[1]:rng[2], , drop=FALSE][s==ltt[i], ltt[i]];
n - 1;
});
if (tolower(method)[1] == 'rank') weight <- rank(-colMeans(cnt)) else
if (tolower(method)[1] == 'r') weight <- colMeans(cnt)/(ncol(cnt)-1) else
if (tolower(method)[1] == 'count') weight <- colMeans(cnt) else
weight <- rep(1, ncol(cnt));
for (i in 1:ncol(mtrx)) {
x <- mtrx[, i];
rng <- range(which(x!='-'));
ttl[rng[1]:rng[2]] <- ttl[rng[1]:rng[2]] + 1;
for (j in 1:length(ltt)) {
ind <- which(x==ltt[j]);
ind <- ind[ind>=rng[1] & ind<=rng[2]];
tbl[ind, j] <- tbl[ind, j] + weight[i];
};
};
rownames(tbl) <- 1:nrow(tbl);
out <- cbind(tbl, Count=ttl, Gap=apply(mtrx, 1, function(x) length(x[x=='-'])));
list(weighted=out, weight=weight, method=method);
};
CallConsensus <- function(weighted) {
tbl <- weighted[, c('-', 'A', 'C', 'G', 'T')];
cll <- apply(tbl[, 1:5], 1, function(x) {
mx <- which(x==max(x));
if (length(mx)>1) sample(mx, 1) else mx;
});
cll <- colnames(tbl)[1:5][cll];
names(cll) <- rownames(weighted);
cll;
}
AlignConsensus2Reference <- function(con, ref) {
require(S4Vectors);
require(Biostrings);
pw <- pairwiseAlignment(con, ref, type='global-local');
ptn <- as.character(pattern(pw));
sbj <- as.character(subject(pw));
prs <- data.frame(P=strsplit(ptn, '')[[1]], S=strsplit(sbj, '')[[1]], stringsAsFactors = FALSE);
ind <- rep(NA, nrow(prs));
ind[prs[,1]!='-'] <- 1:length(prs[prs[,1]!='-', 1]);
rownames(prs) <- 1:nrow(prs);
prs$index <- ind;
ind0 <- prs[prs[,1]==prs[,2] & prs[,1]!='-', 3];
ind1 <- prs[prs[,1]!='-' & prs[,2]!='-' & prs[,1]!=prs[,2], 3];
ind2 <- prs[prs[,2]=='-', 3];
ind3 <- prs[which(prs[,1]=='-')-1, 3];
ind3 <- ind3[!is.na(ind3)];
ind4 <- Rle(as.integer(prs[,1]=='-'));
ind4 <- runLength(ind4)[runValue(ind4)==1];
cnt <- c(match=nmatch(pw), mismatch=nmismatch(pw), insertion=nindel(pw)@insertion[1,],
deletion=nindel(pw)@deletion[1,]);
idl <- nindel(pw);
list(alignment=pw,
index=list(match=ind0, mismatch=ind1, insertion=ind2, deletion=ind3, deletion.width=ind4),
count=c(match=nmatch(pw), mismatch=nmismatch(pw), insertion=idl@insertion[1,], deletion=idl@deletion[1,]));
}
######## TODO
OptimizeConsensus <- function(freq, count, gap, ref) {
CallCon <- function(x) {
mx <- which(x==max(x));
if (length(mx)>1) sample(mx, 1) else mx;
};
lvl1 <- unique(count);
}
# Weigth sequences
wgt <- WeightConsensus(aln, method=weight);
# Call consensus
rg1 <- apply(aln, 2, function(a) range(which(a!='-')));
rg0 <- c(max(rg1[1, ]), min(rg1[2, ]));
cll <- CallConsensus(wgt$weighted[rg0[1]:rg0[2], , drop=FALSE]);
cll <- cll[cll!='-'];
min(wgt[[2]])<(0.5*(length(seq)-1))
min(wgt[[2]])
wgt[[2]]
aln <- do.call('cbind', strsplit(as.character(msa), ''));
rownames(aln) <- 1:nrow(aln);
# Weigth sequences
wgt <- WeightConsensus(aln, method='count');
wgt[[2]]
min(wgt[[2]])
min(wgt[[2]])<(0.5*(length(seq)-1))
if (min(wgt[[2]])<(0.5*(length(seq)-1))) {
removed <- c(removed, names(seq)[wgt[[2]]==min(wgt[[2]])]);
} else pss <- TRUE;
length(seq)
removed
pss <- FALSE;
print(length(seq));
# Base by base
aln <- do.call('cbind', strsplit(as.character(msa), ''));
rownames(aln) <- 1:nrow(aln);
wgt <- WeightConsensus(aln, method=weight);
wgt[[2]]
sort(wgt[[2]])
# Call consensus
rg1 <- apply(aln, 2, function(a) range(which(a!='-')));
rg0 <- c(max(rg1[1, ]), min(rg1[2, ]));
cll <- CallConsensus(wgt$weighted[rg0[1]:rg0[2], , drop=FALSE]);
cll <- cll[cll!='-'];
sm0 <- sum(apply(cbind(cll, aln[names(cll), ]), 1, function(x) length(x[x==x[1]]))-1);
sm1 <- sapply(1:ncol(aln), function(i) {
a <- aln[, -i];
w <- WeightConsensus(a, method=weight);
r <- apply(a, 2, function(a) range(which(a!='-')));
r <- c(max(r[1, ]), min(r[2, ]));
c <- CallConsensus(w$weighted[r[1]:r[2], , drop=FALSE]);
c <- c[c!='-'];
n <- apply(cbind(c, a[names(c), ]), 1, function(x) length(x[x==x[1]]))-1;
sum(n);
});
sm0
sm1
max(sm1)
if (max(sm1) < sm0) pss <- TRUE else {
removed <- c(removed, names(seq)[sm1==max(sm1)][1]);
seq <- seq[!(names(seq) %in% removed)];
# Run consensus algorithm
msa <- runMsa(seq, method);
}
consensus=paste(cll, collapse='')
length(cll)
head(cll)
cll
seq
min(width(seq))
